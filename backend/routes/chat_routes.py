from fastapi import APIRouter, HTTPException
from models.chat import ChatRequest, ChatResponse, ChatMessage, ChatHistory
from database.db import history_collection
from utils.question_handler import handle_user_question  # ‚úÖ d√πng module chuy√™n x·ª≠ l√Ω
from typing import Optional
from utils.question_handler import handle_user_question


router = APIRouter()


@router.post("/chat", response_model=ChatResponse)
async def chat_with_bot(payload: ChatRequest):
    """
    G·ª≠i tin nh·∫Øn ƒë·∫øn AI v√† l∆∞u l·ªãch s·ª≠ chat cho user_id.
    """
    user_id = payload.user_id
    user_message = payload.message.strip()

    bot_reply = await handle_user_question(user_message)

    if not user_message:
        raise HTTPException(status_code=400, detail="Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")

    # ‚úÖ G·ªçi AI (t√°ch x·ª≠ l√Ω ra module)
    bot_reply = await handle_user_question(user_message)

    # Chu·∫©n b·ªã tin nh·∫Øn ƒë·ªÉ l∆∞u
    user_msg = {"sender": "user", "text": user_message}
    bot_msg = {"sender": "bot", "text": bot_reply}

    # ‚úÖ L∆∞u v√†o MongoDB
    history_collection.update_one(
        {"user_id": user_id},
        {"$push": {"history": {"$each": [user_msg, bot_msg]}}},
        upsert=True,
    )

    # L·∫•y l·∫°i to√†n b·ªô l·ªãch s·ª≠ ƒë·ªÉ tr·∫£ v·ªÅ
    updated_doc = history_collection.find_one({"user_id": user_id})
    history = [ChatMessage(**msg) for msg in updated_doc.get("history", [])]

    return ChatResponse(response=bot_reply, history=history)


@router.get("/chat/history/{user_id}", response_model=ChatHistory)
async def get_chat_history(user_id: str):
    """
    L·∫•y to√†n b·ªô l·ªãch s·ª≠ chat theo user_id.
    """
    doc = history_collection.find_one({"user_id": user_id})
    if not doc:
        return {"user_id": user_id, "history": []}

    history = [ChatMessage(**msg) for msg in doc.get("history", [])]
    return {"user_id": user_id, "history": history}


@router.delete("/chat/history/{user_id}")
async def delete_chat_history(user_id: str):
    """
    Xo√° to√†n b·ªô l·ªãch s·ª≠ chat c·ªßa user_id.
    """
    result = history_collection.delete_one({"user_id": user_id})
    if result.deleted_count == 0:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ ƒë·ªÉ xo√°.")

    return {"message": f"üóëÔ∏è ƒê√£ xo√° l·ªãch s·ª≠ chat c·ªßa user {user_id}"}
